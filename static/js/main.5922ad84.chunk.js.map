{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","containers/App.js","reportWebVitals.js","index.js"],"names":["Card","props","name","email","id","className","alt","src","CardList","robots","cardArray","map","user","i","SearchBox","searchChange","type","placeholder","onChange","Scroll","style","overflowY","border","height","children","App","onSearchChange","event","setState","searchfield","target","value","state","fetch","then","response","json","users","filteredRobots","this","filter","robot","toLowerCase","includes","length","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"gOAqBeA,EAfF,SAACC,GAAW,IAChBC,EAAoBD,EAApBC,KAAMC,EAAcF,EAAdE,MAAOC,EAAOH,EAAPG,GACrB,OAGC,cAFA,CAEA,OAAKC,UAAU,yCAAf,UACC,qBAAKC,IAAI,QAAQC,IAAG,+BAA0BH,EAA1B,OACpB,gCACC,6BAAKF,IACL,4BAAIC,WCCOK,EAbE,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAGbC,EAAYD,EAAOE,KAAI,SAACC,EAAMC,GACnC,OAAO,cAAC,EAAD,CAAcT,GAAIK,EAAOI,GAAGT,GAAIF,KAAMO,EAAOI,GAAGX,KAAMC,MAAOM,EAAOI,GAAGV,OAA5DU,MAEnB,OACC,8BACGH,KCIUI,EAbG,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,aACnB,OACC,qBAAKV,UAAU,MAAf,SACC,uBACCA,UAAU,mCACVW,KAAK,SACLC,YAAY,gBACZC,SAAUH,OCCCI,EARA,SAAClB,GACf,OACC,qBAAKmB,MAAO,CAACC,UAAW,SAAUC,OAAQ,kBAAmBC,OAAQ,SAArE,SACEtB,EAAMuB,YCoDKC,G,wDA7Cd,aAAe,IAAD,8BACb,gBAODC,eAAiB,SAACC,GAGjB,EAAKC,SAAS,CAAEC,YAAaF,EAAMG,OAAOC,SAT1C,EAAKC,MAAQ,CACZvB,OAAQ,GACRoB,YAAa,IAJD,E,gEAiBO,IAAD,OACnBI,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAAEnB,OAAQ4B,S,+BAG9B,IAAD,OACFC,EAAiBC,KAAKP,MAAMvB,OAAO+B,QAAO,SAAAC,GAC/C,OAAOA,EAAMvC,KAAKwC,cAAcC,SAAS,EAAKX,MAAMH,YAAYa,kBAEjE,OAAiC,IAA7BH,KAAKP,MAAMvB,OAAOmC,OACd,yCAIN,sBAAKvC,UAAU,KAAf,UACC,oBAAIA,UAAU,KAAd,yBACA,cAAC,EAAD,CAAWU,aAAcwB,KAAKb,iBAC9B,cAAC,EAAD,UACC,cAAC,EAAD,CAAUjB,OAAQ6B,a,GArCNO,cCCHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBd,MAAK,YAAkD,IAA/Ce,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,MCMdO,IAASC,OAAO,cAAC,EAAD,IACdC,SAASC,eAAe,SAK1BX,M","file":"static/js/main.5922ad84.chunk.js","sourcesContent":["import React from \"react\"\n// this js file is for Card Component\n// Thinking everything is built on components \n// like Legos is a key concept in React\n\n// the statement below is a function expression\nconst Card = (props) => {\n\tconst { name, email, id } = props\n\treturn (\n\t\t// .dib { display: inline-block; \n\t\t// Template literals are string literals allowing embedded expressions\n\t\t<div className=\"tc bg-light-green dib br3 pa3 ma2 grow\">\n\t\t\t<img alt='robot' src={`https://robohash.org/${id}?`}/>\n\t\t\t<div>\n\t\t\t\t<h2>{name}</h2>\n\t\t\t\t<p>{email}</p>\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n\nexport default Card;","import React from \"react\"\nimport Card from './Card';\n\nconst CardList = ({ robots }) => {\n\t// map is like enumerate of list in python\n\t// it is a method of array type in js\n\tconst cardArray = robots.map((user, i) => {\n\t\treturn <Card key={i} id={robots[i].id} name={robots[i].name} email={robots[i].email} />\n\t})\n\treturn (\n\t\t<div>\n\t\t\t{ cardArray }\n\t\t</div>\n\t);\n};\n\nexport default CardList;","import React from \"react\"\n\nconst SearchBox = ({searchChange}) => {\n\treturn (\n\t\t<div className='pa2'>\n\t\t\t<input \n\t\t\t\tclassName='pa3 ba b--green bg-lightest-blue'\n\t\t\t\ttype='search' \n\t\t\t\tplaceholder='search robots'\n\t\t\t\tonChange={searchChange}\n\t\t\t/>\n\t\t</div>\n\t);\n}\n\nexport default SearchBox;\n","import React from 'react';\n\nconst Scroll = (props) => {\n\treturn (\n\t\t<div style={{overflowY: 'scroll', border: '5px solid black', height: '800px'}}>\n\t\t\t{props.children}\n\t\t</div>\n\t);\n};\n\nexport default Scroll;","import React, { Component }from \"react\"\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox'\nimport Scroll from '../components/Scroll'\nimport './App.css'\n\n// PROP static\n// STATE dynamic\n// parent   child\n// state -> prop\n\nclass App extends Component {\n\tconstructor() {\n\t\tsuper()\n\t\tthis.state = {\n\t\t\trobots: [],\n\t\t\tsearchfield: ''\n\t\t}\n\t}\n\n\tonSearchChange = (event) => {\n\t\t// change the state of App\n\t\t// change state.searchfield\n\t\tthis.setState({ searchfield: event.target.value })\n\t\t// change state.robots\n\t\t\n\t\t// console.log(filteredRobots);\n\t}\n\n\tcomponentDidMount() {\n\t\tfetch('https://jsonplaceholder.typicode.com/users')\n\t\t.then(response => response.json())\n\t\t.then(users => this.setState({ robots: users }))\n\t}\n\n\trender() {\n\t\tconst filteredRobots = this.state.robots.filter(robot =>{\n\t\t\treturn robot.name.toLowerCase().includes(this.state.searchfield.toLowerCase())\n\t\t})\n\t\tif (this.state.robots.length === 0) {\n\t\t\treturn <h1>LOADING</h1>\n\t\t}\n\t\telse {\n\t\t\treturn (\n\t\t\t\t<div className='tc'>\n\t\t\t\t\t<h1 className='f1'>RoboFriends</h1>\n\t\t\t\t\t<SearchBox searchChange={this.onSearchChange}/>\n\t\t\t\t\t<Scroll>\n\t\t\t\t\t\t<CardList robots={filteredRobots}/>\n\t\t\t\t\t</Scroll>\n\t\t\t\t</div>\n\t\t\t);\n\t\t}\n\t\t\n\t}\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n// without file extension implies it's a js file\nimport App from './containers/App';\nimport reportWebVitals from './reportWebVitals';\nimport \"tachyons\"\n\n// since we use export, instead of export default, \n// we could have multiple exports \n// and we have to destructure it\n\n// we could make a property like below greeting\nReactDOM.render(<App />\n\t,document.getElementById('root'));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}